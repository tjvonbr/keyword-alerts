// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  emailVerified DateTime?
  accounts  Account[]
  channels Channel[]
  sessions  Session[]
  socialIntegrations SocialIntegrations[]
  keywords Keyword[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@id([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
  @@map("verification_tokens")
}

model SocialIntegrations {
  id String @id @default(uuid())
  platformId String
  platform Platform @relation(fields: [platformId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("social_integrations")
}

model Platform {
  id String @id @default(uuid())
  name String
  channels Channel[]
  keywords Keyword[]
  socialIntegrations SocialIntegrations[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("platforms")
}

model Channel {
  id String @id @default(uuid())
  name String
  userId String
  user User @relation(fields: [userId], references: [id])
  platformId String
  platform Platform @relation(fields: [platformId], references: [id])
  keywords Keyword[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("channels")
}

enum KeywordStatus {
  ACTIVE
  INACTIVE
}

model Keyword {
  id String @id @default(uuid())
  name String
  status KeywordStatus @default(ACTIVE)
  userId String
  user User @relation(fields: [userId], references: [id])
  channelId String
  channel Channel @relation(fields: [channelId], references: [id])
  platformId String
  platform Platform @relation(fields: [platformId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("keywords")
}